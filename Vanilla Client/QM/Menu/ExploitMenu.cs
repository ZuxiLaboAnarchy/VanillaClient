using MelonLoader;
using System.Collections;
using System.Linq;
using UnityEngine;
using Vanilla.Buttons.QM;
using Vanilla.Config;
using Vanilla.Exploits;
using Vanilla.Modules;
using Vanilla.Wrappers;
using VRC;
using VRC.Core;
using VRC.SDK3.Components;
using VRC.SDKBase;

namespace Vanilla.QM.Menu
{

    internal class ExploitMenu
    {
        public bool? forcejump { get; set; }

        internal static string backupID = "";
        internal static void InitMenu(QMTabMenu tabMenu)
        {
            static Il2CppSystem.Collections.Generic.List<VRC.Player> GetAllPlayers() => PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0;
            bool lagger = true;
            IEnumerator ItemLaggers()
            {
                while (lagger == true)
                {
                    foreach (VRC_Pickup item in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(item.gameObject);
                        item.transform.position = GeneralWrappers.LocalPlayer().transform.position + new Vector3(0f, 0.15f, 0f);
                    }
                    yield return new WaitForSeconds(0.3f);
                }
            }

            IEnumerator ItemLagger2()
            {
                while (lagger == true)
                {
                    foreach (VRC_Pickup item in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(item.gameObject);
                        item.transform.position = GeneralWrappers.LocalPlayer().transform.position + new Vector3(0f, 9.998E+07f, 0f);
                    }
                    yield return new WaitForSeconds(0.3f);
                }
            }
            var ExploitMenu = new QMNestedButton(tabMenu, 2, 3, "Exploits", "Vanilla", "Vanilla Client");

            var PCCrash = new QMSingleButton(ExploitMenu, 1, 0, "Crash Lobby", delegate
            {
                Crash(MainConfig.PCCrashID);
            }, "Click me to Crash The World");

            var EarRapeButton = new QMToggleButton(ExploitMenu, 3, 0, "E1", delegate
            {
                Log("Exploits", "Earrape Enabled");
                RuntimeConfig.ShouldEarRape = true;
                MelonCoroutines.Start(EarRape.EarrapeExploit());
            }, delegate
            {
                Log("Exploits", "Earrape Disabled");
                RuntimeConfig.ShouldEarRape = false;
            }, "HAHA E1 Go Burt");


            var FlyToggle = new QMToggleButton(ExploitMenu, 2, 0, "Fly", delegate
            {

                FlyManager.ToggleFly();

            }, delegate
            {

                FlyManager.ToggleFly();

            }, "I believe i can Fly");

            var Deleteportals = new QMSingleButton(ExploitMenu, 4, 0, "DeletePortals", delegate
            {
                var array = Resources.FindObjectsOfTypeAll<PortalTrigger>();
                for (int i = 0; i < array.Length; i++)
                    if (array[i].gameObject.active)
                        GameObject.DestroyImmediate(array[i].gameObject);
            }, "Bye Bye portals");

            var forceJump = new QMToggleButton(ExploitMenu, 3, 2, "ForceJump", delegate
            {
                EnableDisableJumping(state: true);
            }, delegate
            {
                EnableDisableJumping(state: false);
            }, "Force Jump for those annoying worlds");

            var Itemlagg = new QMToggleButton(ExploitMenu, 4, 3, "Itemlag", delegate
            {

#pragma warning disable CS0219 // Variable is assigned but its value is never used
                bool lagger = true;
#pragma warning restore CS0219 // Variable is assigned but its value is never used
                //  MelonCoroutines.Start(ItemLaggers());
                //MelonCoroutines.Start(ItemLagger2());

            }, delegate
            {

                //MelonCoroutines.Stop(ItemLaggers());
                //MelonCoroutines.Stop(ItemLagger2());;

            }, "Item Lag");

            var Hidequest = new QMToggleButton(ExploitMenu, 3, 3, "Hidequest", delegate
            {
                var playes = GetAllPlayers();
                for (int i = 0; i < playes._size; i++)
                {
                    if (playes[i].prop_APIUser_0.last_platform != "standalonewindows" && !playes[i].IsFriend())
                        playes[i].gameObject.SetActive(false);
                }
            }, delegate
            {
                var playes = GetAllPlayers();
                for (int i = 0; i < playes._size; i++)
                {
                    if (playes[i].prop_APIUser_0.last_platform != "standalonewindows" && !playes[i].IsFriend())
                        playes[i].gameObject.SetActive(true);
                }

            }, "Hide Quest (Does not block but local hide them)");


            var Muder4 = new QMNestedButton(ExploitMenu, 4, 4, "Murder 4", "Vanilla", "Vanilla client");


            var GoldenGun = new QMToggleButton(Muder4, 1, 0, "Gold Gun", delegate
            {
                MurderManager.murdergoldweapon = true;
            }, delegate

            {
                MurderManager.murdergoldweapon = false;
            }, "Makes Weapons Golden for self");

            var allGoldenGun = new QMToggleButton(Muder4, 2, 0, "Gold Gun All", delegate
            {
                MurderManager.everyonegoldgun = true;
            }, delegate

            {
                MurderManager.everyonegoldgun = false;
            }, "Makes Weapons Golden");

            var God = new QMToggleButton(Muder4, 3, 0, "God", delegate
            {
                MurderManager.murdergodmod = true;
            }, delegate

            {
                MurderManager.murdergodmod = false;
            }, "Makes you God");

            var SelfFire = new QMToggleButton(Muder4, 4, 0, "Self Rapid Fire", delegate
            {
                MurderManager.continuesfire = true;
            }, delegate

            {
                MurderManager.continuesfire = false;
            }, "Self Continue Fire");

            var OtherFire = new QMToggleButton(Muder4, 1, 1, "Rapid Fire", delegate
            {
                MurderManager.everyonecontinuesfire = true;
            }, delegate

            {
                MurderManager.everyonecontinuesfire = false;
            }, "Continue Fire");

            var start = new QMSingleButton(Muder4, 2, 1, "Start", delegate
            {
                MurderMisc.MurderMod("Btn_Start");
            }, "Starts the game");

            var Blind = new QMSingleButton(Muder4, 3, 1, "Blind", delegate
            {
                MurderMisc.MurderMod("OnLocalPlayerBlinded");
            }, "Blinds users in game");
            
            var stop = new QMSingleButton(Muder4, 4, 1, "stop", delegate
            {
                MurderMisc.MurderMod("SyncAbort");
            }, "Aborts game");

            var GoodWin = new QMSingleButton(Muder4, 1, 1, "Good Win", delegate
            {
                MurderMisc.MurderMod("SyncVictoryB");
            }, "Good Guys win game");

            var Badwin = new QMSingleButton(Muder4, 2,2, "Bad Win", delegate
            {
                MurderMisc.MurderMod("SyncVictoryM");
            }, "Bad Guys win game");

            var force = new QMSingleButton(Muder4, 3, 2, "Force Steal", delegate
            {
                VRC_Pickup[] ItemArray = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray<VRC_Pickup>();
                foreach (VRC_Pickup Items in ItemArray)
                {
                    bool Check = Items.gameObject;
                    if (Check)
                    {
                        Items.DisallowTheft = false;
                    }
                }
                VRC_Pickup[] ItemArray1 = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray<VRC_Pickup>();
                foreach (VRC_Pickup Items1 in ItemArray1)
                {
                    bool Check1 = Items1.gameObject;
                    if (Check1)
                    {
                        Items1.DisallowTheft = false;
                    }
                }
                VRCPickup[] ItemArray2 = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray<VRCPickup>();
                foreach (VRCPickup Items3 in ItemArray2)
                {
                    bool Check2 = Items3.gameObject;
                    if (Check2)
                    {
                        Items3.DisallowTheft = false;
                    }
                }
            }, "Steal Pickup");

            /* How to do the Among Us hacks Implement soon 

                GameObject Among = submenu.Create("AmongUs", Xploitsubmenu);
                new Submenubutton(Xploitsubmenu.GetMenu(), "AmongUs", Among, Download_Images._XploitIcon, false, 4, 0);
                new NButton(Among.GetMenu(), "Complete Task", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("OnLocalPlayerCompletedTask"));
                new NButton(Among.GetMenu(), "Crew Win", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("Btn_Start"));
                new NButton(Among.GetMenu(), "Sussy Wub", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("SyncVictoryM"));
                new NButton(Among.GetMenu(), "Kill All", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("KillLocalPlayer"));
                new NButton(Among.GetMenu(), "Start Game", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("SyncVictoryB"));
                new NButton(Among.GetMenu(), "Force Meeting", () => Defiance.Exploits.AmongUsMisc.AmongUsMod("StartMeeting"));

             */


            /* World History button Somthing like this 

            Nocturnal.Ui.qm.Worldhistory.worldhistorymenu = submenu.Create("World History", Menu);
            new Submenubutton(Menu.GetMenu(), "World History", Nocturnal.Ui.qm.Worldhistory.worldhistorymenu, Download_Images._WorldIcon, true, 2, 6);

             */

        }
        internal static void Crash(string AvatarID)
        {

            backupID = APIUser.CurrentUser.avatarId;

            PlayerWrapper.HideSelf(true);
            PlayerWrapper.ChangePlayerAvatar(AvatarID);
            LogHandler.Log("Crasher", $"Changed To Crash Avatar {AvatarID}");

            GeneralUtils.Delay(10, OnCrashDone);
        }
        internal static void OnCrashDone()
        {
            PlayerWrapper.ChangePlayerAvatar(backupID);
            LogHandler.Log("Crasher", $"Changed To Avatar {backupID}");
            PlayerWrapper.HideSelf(false);

        }
        static void EnableDisableJumping(bool state)
        {
            GameObject gameObject = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject;
            if (state && gameObject.GetComponent<PlayerModComponentJump>() == null)
            {
                gameObject.AddComponent<PlayerModComponentJump>();
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 3f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 3f;
            }
            else
            {
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 3f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 3f;
            }
            if (!state && gameObject.GetComponent<PlayerModComponentJump>() != null)
            {
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 0f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 0f;
                UnityEngine.Object.Destroy(gameObject.GetComponent<PlayerModComponentJump>());
            }
        }

    }
}

