using MelonLoader;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using Vanilla.Buttons.QM;
using Vanilla.Config;
using Vanilla.Exploits;
using Vanilla.Modules;
using Vanilla.Wrappers;
using VRC;
using VRC.Core;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;
using VRTK.Controllables.ArtificialBased;

namespace Vanilla.QM.Menu
{

    internal class ExploitMenu
    {
        public bool? forcejump { get; set; }

        internal static string backupID = "";
        internal static void InitMenu(QMTabMenu tabMenu)
        {
            static Il2CppSystem.Collections.Generic.List<VRC.Player> GetAllPlayers() => PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0;
            bool lagger = true;
            IEnumerator ItemLaggers()
            {
                while (lagger == true)
                {
                    foreach (VRC_Pickup item in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(item.gameObject);
                        item.transform.position = GeneralWrappers.LocalPlayer().transform.position + new Vector3(0f, 0.15f, 0f);
                    }
                    yield return new WaitForSeconds(0.3f);
                }
            }

            IEnumerator ItemLagger2()
            {
                while (lagger == true)
                {
                    foreach (VRC_Pickup item in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(item.gameObject);
                        item.transform.position = GeneralWrappers.LocalPlayer().transform.position + new Vector3(0f, 9.998E+07f, 0f);
                    }
                    yield return new WaitForSeconds(0.3f);
                }
            }
            var ExploitMenu = new QMNestedButton(tabMenu, 2, 3, "Exploits", "Vanilla", "Vanilla Client");

            var PCCrash = new QMSingleButton(ExploitMenu, 1, 0, "Crash Lobby", delegate
            {
                Crash(MainConfig.PCCrashID);
            }, "Click me to Crash The World");

            var EarRapeButton = new QMToggleButton(ExploitMenu, 3, 0, "E1", delegate
            {
                Log("Exploits", "Earrape Enabled");
                RuntimeConfig.ShouldEarRape = true;
                MelonCoroutines.Start(EarRape.EarrapeExploit());
            }, delegate
            {
                Log("Exploits", "Earrape Disabled");
                RuntimeConfig.ShouldEarRape = false;
            }, "HAHA E1 Go Burt");


            var FlyToggle = new QMToggleButton(ExploitMenu, 2, 0, "Fly", delegate
            {

                FlyManager.ToggleFly();

            }, delegate
            {

                FlyManager.ToggleFly();

            }, "I believe i can Fly");

            var Deleteportals = new QMSingleButton(ExploitMenu, 4, 0, "DeletePortals", delegate
            {
                var array = Resources.FindObjectsOfTypeAll<PortalTrigger>();
                for (int i = 0; i < array.Length; i++)
                    if (array[i].gameObject.active)
                        GameObject.DestroyImmediate(array[i].gameObject);
            }, "Bye Bye portals");

            var forceJump = new QMToggleButton(ExploitMenu, 3, 2, "ForceJump", delegate
            {
                EnableDisableJumping(state: true);
            }, delegate
            {
                EnableDisableJumping(state: false);
            }, "Force Jump for those annoying worlds");

            var Itemlagg = new QMToggleButton(ExploitMenu, 4, 3, "Itemlag", delegate
            {
#pragma warning disable CS0219 // Variable is assigned but its value is never used
                bool lagger = true;
#pragma warning restore CS0219 // Variable is assigned but its value is never used
                MelonCoroutines.Start(ItemLaggers());
                MelonCoroutines.Start(ItemLagger2());

            }, delegate
            {

                MelonCoroutines.Stop(ItemLaggers());
                MelonCoroutines.Stop(ItemLagger2());;

            }, "Item Lag");

            var Hidequest = new QMToggleButton(ExploitMenu, 3, 3, "Hidequest", delegate
            {
                var playes = GetAllPlayers();
                for (int i = 0; i < playes._size; i++)
                {
                    if (playes[i].prop_APIUser_0.last_platform != "standalonewindows" && !playes[i].IsFriend())
                        playes[i].gameObject.SetActive(false);
                }
            }, delegate
            {
                var playes = GetAllPlayers();
                for (int i = 0; i < playes._size; i++)
                {
                    if (playes[i].prop_APIUser_0.last_platform != "standalonewindows" && !playes[i].IsFriend())
                        playes[i].gameObject.SetActive(true);
                }

            }, "Hide Quest (Does not block but local hide them)");


            var Muder4 = new QMNestedButton(ExploitMenu, 4, 2, "Murder 4", "Vanilla", "Vanilla client");


            var getLuger = new QMSingleButton(Muder4, 1, 0, "Get Luger", delegate
            {
                Luger();
            }, "Gets Luger Gun");

            var OtherFire = new QMSingleButton(Muder4, 2, 0, "Rapid Fire", delegate
            {
                GameObject.Find("Game Logic/Weapons/Revolver").GetComponent<UdonBehaviour>().SendCustomEvent("Fire");
            }, "Continue Fire");


            var Blind = new QMSingleButton(Muder4, 3, 0, "Blind", delegate
            {
                GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "OnLocalPlayerFlashbanged");
            }, "Blinds users in game");


            var force = new QMSingleButton(Muder4, 4, 0, "Force Steal", delegate
            {
                VRC_Pickup[] ItemArray = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray<VRC_Pickup>();
                foreach (VRC_Pickup Items in ItemArray)
                {
                    bool Check = Items.gameObject;
                    if (Check)
                    {
                        Items.DisallowTheft = false;
                    }
                }
                VRC_Pickup[] ItemArray1 = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray<VRC_Pickup>();
                foreach (VRC_Pickup Items1 in ItemArray1)
                {
                    bool Check1 = Items1.gameObject;
                    if (Check1)
                    {
                        Items1.DisallowTheft = false;
                    }
                }
                VRCPickup[] ItemArray2 = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray<VRCPickup>();
                foreach (VRCPickup Items3 in ItemArray2)
                {
                    bool Check2 = Items3.gameObject;
                    if (Check2)
                    {
                        Items3.DisallowTheft = false;
                    }
                }
            }, "Steal Pickup");

            var unlockdoor = new QMSingleButton(Muder4, 1, 1, "Unlock Door", delegate
            {
                unlock();
            }, "Unlock Door");

            var open = new QMSingleButton(Muder4, 2, 1, "Open Doors", delegate
            {
                opendoor();
            }, "Open doors");

            var snake = new QMSingleButton(Muder4, 3, 1, "Snake", delegate
            {
                GameObject.Find("Game Logic/Snakes/SnakeDispenser").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "DispenseSnake");
            }, "Relases the snake");

            var shotguns = new QMSingleButton(Muder4, 4, 1, "Get ShotGun", delegate
            {
                shotgun();
            },"Give me ShotGun");



            // Start of Among Us

            var AmonUsMenu = new QMNestedButton(ExploitMenu, 4, 1, "Among Us", "Vanilla", "Vanilla client");

            var Imposter = new QMSingleButton(AmonUsMenu, 1, 0, "Show Imposter", delegate
            {
                IWantSpiderman();
            }, "Logs to Console who imposter is");

            var repair = new QMSingleButton(AmonUsMenu, 2, 0, "Repair All", delegate
            {
                RepairAll();
            }, "Repair All sabotage");

            var killall = new QMSingleButton(AmonUsMenu, 3, 0, "Sabotage All", delegate
            {
                sabotageeverything();
            }, "sabotage all stuffs");

            var ejectall = new QMSingleButton(AmonUsMenu, 4, 0, "Air Lock All", delegate
            {
                ejecteveryone();
            }, "Ejects all player");

            var closevote = new QMSingleButton(AmonUsMenu, 1, 1, "Close out Vote", delegate
            {
                closevotey();
            },"Closes the vote menu");

            /* World History button Somthing like this 

            Nocturnal.Ui.qm.Worldhistory.worldhistorymenu = submenu.Create("World History", Menu);
            new Submenubutton(Menu.GetMenu(), "World History", Nocturnal.Ui.qm.Worldhistory.worldhistorymenu, Download_Images._WorldIcon, true, 2, 6);

             */

        }


    internal static void Crash(string AvatarID)
        {

            backupID = APIUser.CurrentUser.avatarId;

            PlayerWrapper.HideSelf(true);
            PlayerWrapper.ChangePlayerAvatar(AvatarID);
            LogHandler.Log("Crasher", $"Changed To Crash Avatar {AvatarID}");

            GeneralUtils.Delay(15, OnCrashDone);
        }
        internal static void OnCrashDone()
        {
            PlayerWrapper.ChangePlayerAvatar(backupID);
            LogHandler.Log("Crasher", $"Changed To Avatar {backupID}");
            PlayerWrapper.HideSelf(false);

        }
        static void EnableDisableJumping(bool state)
        {
            GameObject gameObject = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject;
            if (state && gameObject.GetComponent<PlayerModComponentJump>() == null)
            {
                gameObject.AddComponent<PlayerModComponentJump>();
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 3f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 3f;
            }
            else
            {
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 3f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 3f;
            }
            if (!state && gameObject.GetComponent<PlayerModComponentJump>() != null)
            {
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_0 = 0f;
                gameObject.GetComponent<PlayerModComponentJump>().field_Private_Single_1 = 0f;
                UnityEngine.Object.Destroy(gameObject.GetComponent<PlayerModComponentJump>());
            }
        }

        internal static void shotgun()
        {
            VRC_Pickup[] array8 = Resources.FindObjectsOfTypeAll<VRC_Pickup>();
            for (int num2 = 0; num2 < array8.Length; num2++)
            {
                if (array8[num2].gameObject.name.ToLower().Contains("shotgun"))
                {
                    Networking.SetOwner(PlayerWrapper.GetCurrentPlayer().prop_VRCPlayerApi_0, array8[num2].gameObject);
                    array8[num2].transform.position = PlayerWrapper.GetCurrentPlayer().gameObject.transform.position + Vector3.up;
                    array8[num2].pickupable = true;
                    array8[num2].DisallowTheft = false;
                    break;
                }
            }
        }

        internal static void Luger()
        {
            VRC_Pickup[] array7 = Resources.FindObjectsOfTypeAll<VRC_Pickup>();
            for (int num = 0; num < array7.Length; num++)
            {
                if (array7[num].gameObject.name.ToLower().Contains("luger"))
                {
                    Networking.SetOwner(PlayerWrapper.GetCurrentPlayer().prop_VRCPlayerApi_0, array7[num].gameObject);
                    array7[num].transform.position = PlayerWrapper.GetCurrentPlayer().gameObject.transform.position + Vector3.up;
                    array7[num].pickupable = true;
                    array7[num].DisallowTheft = false;
                    break;
                }
            }
        }

        internal static void unlock()
        {
            List<Transform> list = new List<Transform>
                {
                    GameObject.Find("Door").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (3)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (4)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (5)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (6)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (7)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (15)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (16)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (8)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (13)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (17)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (18)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (19)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (20)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (21)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (22)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (23)").transform.Find("Door Anim/Hinge/Interact shove"),
                    GameObject.Find("Door (14)").transform.Find("Door Anim/Hinge/Interact shove")
                 };
            foreach (Transform transform in list)
            {
                transform.GetComponent<UdonBehaviour>().Interact();
                transform.GetComponent<UdonBehaviour>().Interact();
                transform.GetComponent<UdonBehaviour>().Interact();
                transform.GetComponent<UdonBehaviour>().Interact();
            }
        }

        internal static void opendoor()
        {
            List<Transform> list = new List<Transform>
                {
                    GameObject.Find("Door").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (3)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (4)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (5)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (6)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (7)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (15)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (16)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (8)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (13)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (17)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (18)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (19)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (20)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (21)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (22)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (23)").transform.Find("Door Anim/Hinge/Interact open"),
                    GameObject.Find("Door (14)").transform.Find("Door Anim/Hinge/Interact open")
                };
            foreach (Transform transform in list)
            {
                transform.GetComponent<UdonBehaviour>().Interact();
            }
        }





        // Among Us Handler

        internal static void IWantSpiderman()
        {
            foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if (gameObject.name.Contains("Player Entry") && gameObject.GetComponentInChildren<Text>().text != "PlayerName" && gameObject.GetComponent<Image>().color.r > 0f)
                {
                    MelonLogger.Msg(gameObject.GetComponentInChildren<Text>().text + " is the imposter (U want pictures of Spiderman!!!)");
                }
            }
        }


        internal static void RepairAll()
        {
            foreach (UdonBehaviour udonBehaviour in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
            {
                udonBehaviour.SendCustomNetworkEvent(0, "SyncRepairComms");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncRepairReactor");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncRepairOxygen");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncRepairLights");
            }
        }
        internal static void sabotageeverything()
        {
            foreach (UdonBehaviour udonBehaviour in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
            {
                udonBehaviour.SendCustomNetworkEvent(0, "SyncDoSabotageComms");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncDoSabotageReactor");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncDoSabotageOxygen");
                udonBehaviour.SendCustomNetworkEvent(0, "SyncDoSabotageLights");
            }
        }
        internal static void ejecteveryone()
        {
            foreach (UdonBehaviour udonBehaviour in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
            {
                udonBehaviour.SendCustomNetworkEvent(0, "SyncVotedOut");
            }
        }

        internal static void closevotey()
        {
            foreach (UdonBehaviour udonBehaviour in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
            {
                udonBehaviour.SendCustomNetworkEvent(0, "SyncCloseVoting");
            }
        } 
    }
}