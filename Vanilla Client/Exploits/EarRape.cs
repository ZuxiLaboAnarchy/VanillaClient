using ExitGames.Client.Photon;
using Photon.Realtime;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Vanilla.Config;
using Vanilla.Wrappers;
using VRC.Core;
using VRC.SDKBase;

namespace Vanilla.Exploits
{
    internal class EarRape
    {
        private static readonly RaiseEventOptions raiseEventOptions = new RaiseEventOptions
        {
            field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            field_Public_EventCaching_0 = EventCaching.DoNotCache
        };

        internal static IEnumerator EarrapeExploit()
        {
            byte[] voiceData = new byte[71]
            {
                0, 0, 0, 0, 0, 0, 0, 0, 187, 134,
                59, 0, 248, 125, 232, 192, 92, 160, 82, 254,
                48, 228, 30, 187, 149, 196, 177, 215, 140, 223,
                127, 209, 66, 60, 0, 226, 53, 180, 176, 97,
                104, 4, 248, 238, 195, 134, 44, 185, 182, 68,
                94, 114, 205, 181, 150, 56, 232, 126, 247, 155,
                123, 172, 108, 98, 80, 56, 113, 89, 160, 134,
                221
            };







            Dev("EarRape", Convert.ToBase64String(voiceData));
            Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0.playerId), 0, voiceData, 0, 4);
            while (RuntimeConfig.ShouldEarRape)
            {
                Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, voiceData, 4, 4);
                PhotonUtils.OpRaiseEvent(1, voiceData, raiseEventOptions, default(SendOptions));
                yield return new WaitForSecondsRealtime(0.03f);
            }
        }
    }
}
